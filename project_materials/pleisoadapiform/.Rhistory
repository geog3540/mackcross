cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
)
ques_who
quess_who <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = TRUE
) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1)
quess_who
who5$country <- factor(who5$country)
who5$sex <- factor(who5$sex)
who5$year <- factor(who5$year)
who5$sex
who5$country
who5$country <- factor(who5$country)
who5$sex <- factor(who5$sex)
who5$year <- factor(who5$year)
df <- group_by(who5, country, sex, year)
count(df)
summ <- summarize(df, country = n(),
sex = n(),
year = n())
summ
pivot2 <- dcast(summ, condition ~ city, value.var = "avg_price")
summ
who5$country <- factor(who5$country)
who5$sex <- factor(who5$sex)
who5$year <- factor(who5$year)
p <- ggplot(df, aes(x=country, y=cases))
p <- p + geom_histogram
library(ggplot2)
p <- ggplot(df, aes(x=country, y=cases))
p <- p + geom_histogram()
p
p <- ggplot(df, aes(x=country, y=cases))
p <- p + geom_bar()
p
p <- ggplot(df, aes(x=country))
p <- p + geom_bar()
p
who5$country <- factor(who5$country)
who5$sex <- factor(who5$sex)
who5$year <- factor(who5$year)
library(ggplot2)
p <- ggplot(df, aes(x=country, color=sex))
p <- p + geom_bar()
p
p <- ggplot(df, aes(x=country, color=sex))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(angle = 45))
p
p <- ggplot(df, aes(x=country, color=sex))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(size =8, angle = 45))
p
p <- ggplot(df, aes(x=country, color=sex))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(size =4, angle = 45))
p
who5$country <- factor(who5$country)
who5$sex <- factor(who5$sex)
who5$year <- factor(who5$year)
library(ggplot2)
p <- ggplot(df, aes(x=country, color=sex))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(size =4, angle = 45))
p <- p + facet_grid(. ~ year)
p
who5$country <- factor(who5$country)
who5$sex <- factor(who5$sex)
who5$year <- factor(who5$year)
library(ggplot2)
p <- ggplot(df, aes(x=country, color=sex))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(size = 4, angle = 45))
p <- p + facet_grid(year ~ .)
p
who5$country <- factor(who5$country)
who5$sex <- factor(who5$sex)
who5$year <- factor(who5$year)
library(ggplot2)
p <- ggplot(df, aes(x=country, color=sex))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(size = 4, angle = 45))
p
who5$country <- factor(who5$country)
who5$sex <- factor(who5$sex)
who5$year <- factor(who5$year)
library(ggplot2)
p <- ggplot(df, aes(x=country, color=year))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(size = 4, angle = 45))
p <- p + facet_grid(. ~ sex)
p
p <- ggplot(df, aes(x=country, fill=year))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(size = 4, angle = 45))
p <- p + facet_grid(. ~ sex)
p
who5$country <- factor(who5$country)
who5$sex <- factor(who5$sex)
who5$year <- factor(who5$year)
library(ggplot2)
p <- ggplot(df, aes(x=country, fill=year))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(size = 2, angle = 45))
p <- p + facet_grid(. ~ sex)
p
View(p)
View(p)
View(p)
p <- ggplot(df, aes(x=country, fill=year))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(size = 2, angle = 45))
p <- p + facet_grid(. ~ sex)
p <- p + scale_color_brewer(high = yellow, low = purple)
?scale_color_brewer
p <- ggplot(df, aes(x=country, fill=year))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(size = 2, angle = 45))
p <- p + facet_grid(. ~ sex)
p <- p + scale_color_brewer(type = div)
p <- ggplot(df, aes(x=country, fill=year))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(size = 2, angle = 45))
p <- p + facet_grid(. ~ sex)
p <- p + scale_color_brewer(type = "div")
p
who1 %>%
count(key)
who1 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = TRUE
)
require(tidyr)
data(who) # this will load the who dataset into memory
who # this will print out a snippet of the dataset
who1 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = TRUE
)
who1
who1 %>%
count(key)
who1 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = TRUE
)
who1
require(tidyr)
data(who) # this will load the who dataset into memory
who # this will print out a snippet of the dataset
who1 %>%
count(key)
?datasets
library(help = "datasets")
HairEyeColor
df <- HairEyeColor
print(names(df))
names(df) == "brown" #giving logic values for which column is named "price"
ncol(df) #gives number of columns
df <- HairEyeColor
print(names(df))
names(df) == "brown" #giving logic values for which column is named "price"
ncol(df) #gives number of columns
rm(list=ls())
df <- HairEyeColor
print(names(df))
names(df) == "brown" #giving logic values for which column is named "price"
ncol(df) #gives number of columns
names(df)
colnames(df)
colnames(df) == "brown" #giving logic values for which column is named "price"
df <- HairEyeColor
colnames(df)
colnames(df) == "Brown" #giving logic values for which column is named "price"
ncol(df) #gives number of columns
library(phylogram)
install.packages("phylogram")
library(phylogram)
x <- read.dendrogram(text = "(A,(B,C));")
plot(x, yaxt = "n")
install.packages("ggtree")
install.packages("Biostrings")
library("ape")
text.string<-
"(((((((cow, pig),whale),(bat,(lemur,human))),(robin,iguana)),coelacanth),gold_fish),shark);"
vert.tree<-read.tree(text=text.string)
library(ape)
text.string<-
"(((((((cow, pig),whale),(bat,(lemur,human))),(robin,iguana)),coelacanth),gold_fish),shark);"
vert.tree<-read.tree(text=text.string)
vert.tree
library(ape)
text.string<-
"(((((((cow, pig),whale),(bat,(lemur,human))),(robin,iguana)),coelacanth),gold_fish),shark);"
vert.tree<-read.tree(text=text.string)
plot(vert.tree,no.margin=TRUE,edge.width=2)
library(ape)
text.string <-
"(((((((cow, pig),whale),(bat,(lemur,human))),(robin,iguana)),coelacanth),gold_fish),shark);"
vert.tree <- read.tree(text = text.string)
plot(vert.tree, no.margin = TRUE, edge.width = 2)
rm(list=ls())
identical(who$ios3, who$iso2)
require(tidyr)
data(who) # this will load the who dataset into memory
who # this will print out a snippet of the dataset
require(tidyr)
data(who) # this will load the who dataset into memory
who # this will print out a snippet of the dataset
who1 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = TRUE
)
who1
who1 %>%
count(key)
?count
require(tidyr)
load(dplyr)
library(dplyr)
library(dplyr)
who1 %>%
count(key)
who2 <- who1 %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who2
who3 <- who2 %>%
separate(key, c("new", "type", "sexage"), sep = "_")
who3
who3 %>%
count(new)
who4 <- who3 %>%
select(-new, -iso2, -iso3)
who5 <- who4 %>%
separate(sexage, c("sex", "age"), sep = 1)
who5
ques_who <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
)
ques_who
who5$country <- factor(who5$country)
who5$sex <- factor(who5$sex)
who5$year <- factor(who5$year)
library(ggplot2)
p <- ggplot(df, aes(x=country, fill=year))
who5$country <- factor(who5$country)
who5$sex <- factor(who5$sex)
who5$year <- factor(who5$year)
library(ggplot2)
p <- ggplot(who5, aes(x=country, fill=year))
p <- p + geom_bar()
p <- p + theme(axis.text.x = element_text(size = 2, angle = 45))
p <- p + facet_grid(. ~ sex)
p
source("~/.active-rstudio-document")
View(p)
View(p)
p
source("~/.active-rstudio-document")
install.packages("gganimate")
source("~/.active-rstudio-document")
install.packages("ggmap")
install.packages("sf")
source("~/.active-rstudio-document")
install.packages("geojsonio")
#Documents/research_projects/primate_map/project_materials/pleisoadapiform/map_generation/north_south_america_shapefiles.json
rm(list=ls())
library(ggplot2)
library(gganimate)
library(ggmap)
library(sf)
library(geojsonio)
# Define the boundaries of the map
bb <- c(left = -120, bottom = -60, right = -30, top = 60)
# Retrieve a map of North and South America from OpenStreetMap
map <- ggmap::get_stamenmap(bbox = bb, zoom = 4, maptype = "toner-lite")
# Read in the points from a CSV file
df_points <- read.csv("Documents/research_projects/primate_map/project_materials/pleisoadapiform/cleaned_primate_data.csv")
View(df_points)
?mustate
?mutate
df <- df_points %>%
mutate(time = (max_ma - min_ma) / 10 * 1:nrow(df_points) + min_ma,
group = sample(letters[1:5], nrow(df_points), replace = TRUE))
library(dplyr)
df <- df_points %>%
mutate(time = (max_ma - min_ma) / 10 * 1:nrow(df_points) + min_ma,
group = sample(letters[1:5], nrow(df_points), replace = TRUE))
topojson_file <- "Documents/research_projects/primate_map/project_materials/pleisoadapiform/map_generation/north_south_america_shapefiles.json"
geojson <- geojsonio::topojson_read(topojson_file)
# Convert the GeoJSON to an sf object
sf_object <- sf::st_as_sf(geojson)
# Convert the sf object to a data.frame
df_sf <- as.data.frame(sf_object)
View(df)
source("~/.active-rstudio-document")
rm(list=ls())
source("~/.active-rstudio-document")
View(df_points)
source("~/.active-rstudio-document")
animation
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
?anim_save
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages("gifski")
source("~/.active-rstudio-document")
# Read in the data from CSV file
df_points <- read.csv("Documents/research_projects/primate_map/project_materials/pleisoadapiform/cleaned_primate_data.csv")
getwd()
source("~/.active-rstudio-document")
View(animation.gif)
View(animation.gif)
animation.gif
source("~/.active-rstudio-document")
getwd()
setwd("~/Documents")
getwd()
setwd("research_projects/primate_map/project_materials/pleisoadapiform/")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
View(animation.gif)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
rm(list=ls())
source("~/.active-rstudio-document")
p_animated
source("~/.active-rstudio-document")
?animation
install.packages("animation")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
?map_data
?geom_sf
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/generating_maps.R")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/generating_maps.R")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/generating_maps.R")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/generating_maps.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
min_ma_range
?range
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/generating_maps.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
View(df)
source("~/.active-rstudio-document")
getwd()
source("~/.active-rstudio-document")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled.R")
library(tidyverse)
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled.R")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled.R")
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(animation)
library(sf)
# Read in the data from CSV file
df_points <- read.csv("cleaned_primate_data.csv")
# Find the range of min_ma values
min_ma_range <- rev(range(df_points$min_ma))
df <- df_points %>%
mutate(time = ifelse(min_ma >= min_ma_range[1] & max_ma <= min_ma_range[1] + 10, min_ma,
ifelse(min_ma <= min_ma_range[1] & max_ma >= min_ma_range[1] + 10, min_ma_range[1] + 10,
ifelse(min_ma >= min_ma_range[1] & max_ma >= min_ma_range[1] + 10, min_ma_range[1] + 10,
NA))),
group = sample(letters[1:5], nrow(df_points), replace = TRUE))
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled.R")
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(animation)
library(sf)
# Read in the data from CSV file
df_points <- read.csv("cleaned_primate_data.csv")
# Find the range of min_ma values
min_ma_range <- rev(range(df_points$min_ma))
df <- df_points %>%
mutate(time = ifelse(min_ma >= min_ma_range[1] & max_ma <= min_ma_range[1] + 10, min_ma,
ifelse(min_ma <= min_ma_range[1] & max_ma >= min_ma_range[1] + 10, min_ma_range[1] + 10,
ifelse(min_ma >= min_ma_range[1] & max_ma >= min_ma_range[1] + 10, min_ma_range[1] + 10,
NA))),
group = sample(letters[1:5], nrow(df_points), replace = TRUE))
# Set up the base map using openstreetmap
map <- ggplot() +
geom_sf(data = map_data, fill = "white", color = "black", size = 0.2) +
geom_point(data = df, aes(x = lng, y = lat, color = group), size = 3) +
scale_color_manual(values = c("a" = "red", "b" = "blue", "c" = "green", "d" = "purple", "e" = "orange")) +
coord_sf(xlim = c(-100, -20), ylim = c(-60, 30)) +
theme_void() +
theme(legend.position = "bottom")
# Animate the points by time
animation.gif <- map +
transition_manual(time, nframes = 100) +
labs(title = "Max and Min MA by Time: {round(frame_time, 1)} Ma") +
ease_aes("linear")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled.R")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled.R")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
rm(list=ls())
# Load required packages
library(maps)
library(ggplot2)
library(gganimate)
library(dplyr)
Create a map of North and South America
?map
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
map
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
getwd()
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages("gifski")
install.packages("gifski")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
?transition_time
?scale_fill_gradient
source("~/.active-rstudio-document")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/best.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
?e_chart
install.packages("echarts4r")
?e_chart
source("~/.active-rstudio-document")
?echarts4r
library(echarts4r)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled2.R")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled2.R")
?transition_time
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled2.R")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled2.R")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled2.R")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled2.R")
source("~/Documents/research_projects/primate_map/project_materials/pleisoadapiform/Untitled2.R")
rm(list=ls())
